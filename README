
                        VHDLLab project overview
                               Version 1.0
                            February, 3, 2008.

===============================================================================
    Contents:
        0) Who should read this
        1) Introduction
        2) Prerequisites
        3) vhdllab-subprojects
        4) Other directories
        5) Building
        6) The build scripts
        7) Contacts
        8) Developers
===============================================================================
0) Who should read this
This documentation will try to elaborate how VHDLLab is organized and how to
build VHDLLab from source. If you simply wish to install VHDLLab server then
read '2) Prerequisites' and INSTALL file instead.


1) Introduction
VHDLLab is a web based IDE for VHDL (programming language). It is designed for
educational purpose as an alternative for commercial products that provide
solutions for VHDL. The need for VHDLLab appeared at Faculty of Electrical
Engineering and Computing, University of Zagreb, Croatia when VHDL was taught
in Digital Electronics course. Originally WebISE was used by students when
programming VHDL code. But WebISE has many problems (huge footprint,
unnecessary features, inability to create automatons, lots of bugs, problems
with licence that disallows universities to distribute program, etc.). VHDLLab
was designed as a lightweight alternative to fix those problems and add few
other features.

VHDLLab has a client-server architecture. Client being a program where students
work to design digital components and server part that implements all necessary
features (code compilation & simulation, data storage, etc.). VHDLLab server is
a central server that is required for client to work! VHDLLab client can't work
as a standalone application (for example, as Eclipse IDE can). The reason for
this is to enable student to work at home, dorm or university without the need
to exchange files between computers. Other neat feature is that it simplifies
installation procedure for a student. In fact student just needs to start one
program (there is no installation at all!).

In the rest of the text a student will be referred to as a user (of VHDLLab
client application).


2) Prerequisites
In order to compile VHDLLab you will need the following:
    - Java JDK 6 (http://java.sun.com/javase/downloads/)
    - Apache Ant 1.7 (http://ant.apache.org/)
    - Apache Tomcat 5 (http://tomcat.apache.org/)
    - MySQL (http://dev.mysql.com/downloads/) - this can be changed to any
      other DBMS that hibernate (http://www.hibernate.org/) supports
      (basically any DBMS you want).

Make sure you install them correctly and update PATH environmental variable.
A user that runs VHDLLab client will only need Java JRE 6.


3) vhdllab-subprojects
By now you probably now that VHDLLab is divided into two projects: client and
server. But that isn't all. Server is designed as a 3-tier architecture (bottom
to top): dao, service and presentation. So instead of designing VHDLLab as one
project it consists of several subprojects. All directories that begin with
'vhdllab-' are subprojects of VHDLLab project. Also worth mentioning is that
all subprojects are eclipse projects. However since each developer can define
its own .project and .classpath eclipse files only samples are provided. They
are called .project-sample and .classpath-sample respectfully. All you need to
do is copy (if working with svn copy of vhdllab then be careful not to
rename/move them instead!) sample files to their intended names
(.project-sample -> .project; .classpath-sample -> .classpath). To speed things
up you can use 'ant once' command (this will do exactly what you need to do but
faster).

Graphical representation of subprojects layout and communication:
 * each dashed box (composed of -) represents one subproject (one jar file)
 * presentation and service are in bigger boxed for esthetical reasons (not
   because they are 'bigger' projects)

  +------------------+        +============+        +~~~~~~~~~~~~~~~~~+
  |    client app    |   +--->|  Internet  |<------>|  Apache Tomcat  |<---+
  |                  |   |    +============+        +~~~~~~~~~~~~~~~~~+    |
  |  +------------+  |   |                                                 |
  |  |   client   |<-+---+                          +----------------------+--+
  |  +------------+  |                              |      server app      |  |
  |  +------------+  |                              |                      |  |
  |  |   common   |  |                              |  +----------------+  |  |
  |  +------------+  |                              |  |                |<-+  |
  |                  |                              |  |  presentation  |     |
  +------------------+                              |  |                |<-+  |
                                                    |  +----------------+  |  |
                                                    |  +----------------+  |  |
                                                    |  |                |<-+  |
                                                    |  |    service     |     |
                                                    |  |                |<-+  |
                                                    |  +----------------+  |  |
                                                    |  +----------------+  |  |
                                                    |  |      dao       |<-+  |
                                                    |  +----------------+     |
                                                    |  +----------------+     |
                                                    |  |    entities    |     |
                                                    |  +----------------+     |
                                                    |  +----------------+     |
                                                    |  |     common     |     |
                                                    |  +----------------+     |
                                                    |                         |
                                                    +-------------------------+

Note: Apache Tomcat is used as a mediator between Internet and presentation
      project!
Note: vhdllab-dao is further linked to (uses) persistence provider (Hibernate)
      that communicates with DBMS (MySQL).
Note: vhdllab-common project is included in both client and server application.
Note: various third-party libraries aren't included in representation.

Description of each subproject:
  a) vhdllab-entities
        All entities are defined in this project. This entities are used
        throughout server projects so they are extracted in separate project.
        This project defines all models (as in model in MVC pattern) used in
        server.
  b) vhdllab-dao
        This is a dao tier of VHDLLab server. It defines how an entity is
        persisted. Implementation detail: it uses JPA and Hibernate as a
        persistence provider to persist an entity.
  c) vhdllab-service
        Second tier of 3-tier architecture (controller in MVC pattern) that
        manipulates with entities. In other words this is where all features
        are implemented (aside from data persistence which is implemented in
        dao tier). Like code compilation & simulation, circuit interface
        extraction, dependency checking, VHDL code generation, etc.
  d) vhdllab-presentation
        Exposes a standard API and defines a protocol for client-server
        communication. Implementation detail: this protocol is wrapped inside
        ubiquitous HTTP.
  e) vhdllab-client
        A client application that user uses to draw/model/write digital
        components. As said before, it does't contain any implemented features
        but instead sends such requests to VHDLLab server to process and return
        results.
  f) vhdllab-common
        Since VHDLLab is divided into client and server application it would be
        unreasonable to copy code that is used in both applications. Instead a
        vhdllab-common exists for just that purpose. Note that code inside this
        project must not depend on subprojects described above (a-e)! In fact
        such code should not even compile!
  g) vhdllab-misc
        This is a special project. One that isn't used during runtime but
        rather during compile time usually by eclipse. Since there are several
        subprojects and they all use, most of the time, same third-party
        libraries, instead of copying or defining absolute paths to those
        libraries this project is used as a "library project" where other
        projects list _relative_ paths to dependency libraries. In addition
        it contains custom ant tasks needed by build files and all source
        non-java files, like source documentation (odt), images (xcf), etc.


4) Other directories
There is only one more source directory besides all subprojects directories. 
Source directory are ones that are present before code is compiled. Once build
script is invoked other directories will be created. They are called build
directories.

That other source directory is 'metadata'. This is where all configuration
files are located (like persistence.xml, web.xml, log4j.properties, etc.). Any
file in metadata directory must be text based and may contain special tokens
that are replaced when building VHDLLab. This special tokens enable having just
one global configuration.properties file (sample is
configuration.properties-sample file). This main configuration is where you
need to define, for example, a database url, user and password, how code should
be compiled (with or without debug information), etc. (check that file to see
other configuration properties). Then all that information can be used in any
file inside metadata directory by using this special tokens. Tokens are
composed like this: @@name_of_a_key_in_main_conf_file@@. Now during build any
such token will be replaced by a value of specified key in main configuration
file. All those replaced files are located in 'local' (or working) directory.
No one should use files in metadata directory even if they don't contain any
special token. Refer them through local directory instead.

Example:
  $ cat configuration.properties
  app.name = vhdllab
  $ cat metadata/example.txt
  This application's name is @@app.name@@
  $ cat local/example.txt
  This application's name is vhdllab

These are build directories that are created when building VHDLLab project:
 * local
    Just described. Contains all metadata files but with those special tokens
    replaced.
 * jlibs, jlibs/tests and jlibs/misc
    jlibs contains jar files of all subprojects, while jlibs/tests contains all
    their tests. jlibs/misc contains jar file of vhdllab-misc project
 * javadoc
    Contains javadoc files.
 * report and all its subdirectories
    All report files needed to create tests reports are located here. If that
    report is created then most interesting file is
    reports/tests/html/index.html. By viewing that file in browser you will
    see detailed report for each test.


5) Building
Building VHDLLab is very simple. You just need to invoke 'package' target. This
will build whole application and create jar files. Those jars can be found in
jlibs build directory.

These are other targets that you can use (invoke them by using
'ant target_name' command):
 * once
    Already explained. This will copy all .project-sample and .classpath-sample
    to their intended names for all subprojects and by doing this enable you to
    import those projects in eclipse workspace. It will also copy sample of
    main configuration file (configuration.properties-sample) to intended name
    (configuration.properties).
 * clean
    Deletes all build directories (all compiled source code, built jars, etc.).
 * compile
    Compiles all source code.
 * package (default target)
    Compiles all source code and creates jars for every subprojects. They are
    located in jlibs directory.
 * run-tests
    Compiles and runs all tests.
 * test
    Runs all tests, generates tests report and opens that report in your
    browser.
 * javadoc
    Generates all javadoc. They are located in javadoc directory.
 * schema-export
    Creates a DDL file and automatically sends it to DBMS thus creating all
    tables and columns needed for persisting entities. This target will not
    work if database was not previously created but that's all that is need.
    Recommended database name is 'vhdllab'.
 * install
    Creates a web archive named 'vhdllab.war' that can be provided to Apache
    Tomcat to create a web application (VHDLLab service/server).
    

For other targets that you can invoke, and save time when developing by using
them, see build.xml file (VHDLLab project wide ant build script).


6) The build scripts
By now you probably already know that Apache Ant was used as a build tool for
VHDLLab. To some extent build scripts are complicated. Not because they are
hard to read but because of the way each of them interact. Therefor this next
few paragraphs will try to elaborate the way each of them operates and how it
was designed.

Each subprojects has its own ant build script (build.xml) but since all of them
contain exactly the same targets none of them actually defines any targets.
Instead each of them imports common.xml file (in this directory) and that file
defines somewhat 'generified' targets. This 'generified' means that it uses
properties, paths and filesets that are not defined in common.xml file but
rather in build.xml files in every subproject. For example: A subproject's
build.xml file first imports common.xml, then defines its own compile.classpath
that common.xml script uses as a classpath when compiling a code. Different
subproject will define different compile.classpath.

A master build script (VHDLLab project wide) is in this directory (build.xml).
Most of targets are very simple. They just iterate through all subprojects
invoking specified targets (like compile or package). Others (like
schema-export or install) are unique to just master build script.

And finally build-properties.xml just defines commons properties that both
master build.xml and common.xml use.

Graphical representation of script dependencies:
 * read from bottom to top: script _uses_ (imports) script

                     build-properties.xml
                    /                    \
           build.xml (master)          common.xml
                                      / / / | \ \ \
                           ... each other subproject script ...

Interaction of scripts:
This one is tricky. Since some subprojects require those configuration files
from local directory, common.xml must invoke target from master build.xml
script called 'prepair-local'. This is done during script initialization (init
target). But in order for this target to generate local directory it needs
custom tasks that are located in vhdllab-misc (ones that create filter file and
apply it for every file in metadata directory - that special token replacement
described above). Since vhdllab-misc is just another subproject it uses the
same common.xml. Very same one that would again invoke prepair-local target
from master build.xml script. In order to solve this build.xml script in
vhdllab-misc overrides init target and voids invoking prepair-local, thus
nulling endless recursive loop that would otherwise occur. Things are just
little more complicated when invoking targets from main build script.

Graphical representation of script invocation from a subproject other then
vhdllab-misc (simplified):

 subproject script           main build script        vhdllab-misc script
   target_name
     |
     +-> init
           |
           +-----------------> prepair-local
                                    |
                                    +---------------------> package
                                                               |
                                    +<-------------------------+
                                    |
           +<-----------------------+
           |
     +<----+
     |
   return

Graphical representation of script invocation from main build script
(simplified):

 main build script               vhdllab-misc script            subprojects
   target_name
     |
     +-> init
           |
           +-> prepair-local
                     |
                     +----------------> package
                                           |
                     +<--------------------+
                     |
           +<--------+
           |
     +<----+
     |
  iterate_though_subprojects
     |
     +----------------------------------------------------------> target_name
                                                                      |
                                                               init <-+
                                                                 |
               prepair-local <-----------------------------------+
               (already done)
                     |
                     +------------------------------------------>+
                                                                 |
                                                                 +--->+
                                                                      |
     +<---------------------------------------------------------------+
     |
   return


7) Contacts
Send ideas, suggestions, bug reports to vhdllab@gmail.com. Sorry for no bug
tracker.

google group: http://groups.google.com/group/vhdllab
mail list: mailto:vhdllab@googlegroups.com
official web page (cro only but with pics):
    http://java.zemris.fer.hr/jCourseware/8.jsp


8) Developers
These are original developers that developed VHDLLab:
 * mr.sc. Marko Čupić (project lead), mailto:Marko.Cupic@fer.hr
 * Ivan Alić, student, mailto:Ivan.Alic@fer.hr
 * Miro Bezjak, student, mailto:Miro.Bezjak@fer.hr
 * Davor Delač, student, mailto:Davor.Delac@fer.hr
 * Boris Ožegović, student, mailto:Boris.Ozegovic@fer.hr
 * Aleksandar Prokopec, student, mailto:Aleksandar.Prokopec@fer.hr
 * Tomislav Rajaković, student, mailto:Tomislav.Rajakovic@fer.hr


Thank you for using VHDLLab and thanks to developers for continuing development
of VHDLLab.
