<?xml version='1.0' encoding='UTF-8'?>
<project name="vhdllab" basedir="." default="package">

	<property name="relative.path" value="." />
	<import file="build-properties.xml" />
	
	<macrodef name="subprojectsRunTarget">
		<attribute name="target"/>
		<sequential>
			<subant inheritall="false" inheritrefs="false" target="@{target}">
				<property name="prepair.local.done" value="true"/>
				<!-- ordered list to optimize dependency resolving -->
				<filelist dir="." files="vhdllab-misc,vhdllab-common,vhdllab-entities,vhdllab-dao,vhdllab-service,vhdllab-presentation,vhdllab-client" />
			</subant>
		</sequential>
	</macrodef>

	<macrodef name="subprojectsNoMiscRunTarget">
		<!-- difference from subprojectsRunTarget is that vhdllab-misc is not included here -->
		<attribute name="target"/>
		<sequential>
			<subant inheritall="false" inheritrefs="false" target="@{target}">
				<property name="prepair.local.done" value="true"/>
				<!-- ordered list to optimize dependency resolving -->
				<filelist dir="." files="vhdllab-common,vhdllab-entities,vhdllab-dao,vhdllab-service,vhdllab-presentation,vhdllab-client" />
			</subant>
		</sequential>
	</macrodef>

	<macrodef name="subprojectsNoMiscCopy">
		<attribute name="toDir"/>
		<attribute name="fromDir"/>
		<attribute name="includes"/>
		<sequential>
			<copy todir="@{toDir}" overwrite="true">
				<!--<fileset dir="vhdllab-client/@{fromDir}" includes="@{includes}" />
				<fileset dir="vhdllab-common/@{fromDir}" includes="@{includes}" />-->
				<fileset dir="vhdllab-dao/@{fromDir}" includes="@{includes}" />
				<fileset dir="vhdllab-entities/@{fromDir}" includes="@{includes}" />
				<!--<fileset dir="vhdllab-presentation/@{fromDir}" includes="@{includes}" />
				<fileset dir="vhdllab-service/@{fromDir}" includes="@{includes}" />-->
			</copy>
		</sequential>
	</macrodef>

	<!-- ======= TARGET DEFINITIONS ======================================= -->
	
	<target name="once">
		<subprojectsRunTarget target="once"/>
		<copy file="${configuration.properties}-sample" tofile="${configuration.properties}" overwrite="true" verbose="true" />
	</target>

	<target name="set-additional-properties">
		<antcall target="set-additional-client-properties"/>
		<antcall target="set-additional-server-properties"/>
	</target>

	<target name="set-additional-client-properties">
		<condition property="should.set.client.debug.properties">
			<equals arg1="true" arg2="${client.debug}" casesensitive="false" trim="true" />
		</condition>
		<antcall target="set-client-debug-properties"/>
		<antcall target="set-client-normal-properties"/>
	</target>

	<target name="set-additional-server-properties">
		<condition property="should.set.server.debug.properties">
			<equals arg1="true" arg2="${server.debug}" casesensitive="false" trim="true" />
		</condition>
		<antcall target="set-server-debug-properties"/>
		<antcall target="set-server-normal-properties"/>
	</target>

	<target name="set-client-debug-properties" if="should.set.client.debug.properties">
		<property name="" value="" />
	</target>

	<target name="set-client-normal-properties" unless="should.set.client.debug.properties">
		<property name="" value="" />
	</target>

	<target name="set-server-debug-properties" if="should.set.server.debug.properties">
		<property name="" value="" />
	</target>

	<target name="set-server-normal-properties" unless="should.set.server.debug.properties">
		<property name="" value="" />
	</target>

	<target name="prepair-local" unless="prepair.local.done">
		<mkdir dir="${local.dir}"/>
		<sync todir="${local.dir}" overwrite="true">
			<fileset dir="${metadata.dir}" />
		</sync>

		<!-- compile ant source folder so custom tasks can be used -->
		<subant inheritall="false" inheritrefs="false" target="package"
			antfile="build.xml" buildpath="vhdllab-misc" />
		<mkdir dir="${jlibs.misc.dir}" />
		<copy todir="${jlibs.misc.dir}" file="vhdllab-misc/${jlibs.dir}/vhdllab-misc.jar" />

		<!-- define create filter task -->
		<taskdef name="createFilter" classname="hr.fer.zemris.vhdllab.ant.CreateFilterFileTask"
			classpath="${vhdllab.misc.jar}" />

		<!-- create a filter file for replace task -->
		<createFilter filterfile="${local.dir}/filter.properties" prefix="@@" sufix="@@" />

		<replace dir="${local.dir}"	includes="**/*" excludes="filter.properties"
			replacefilterfile="${local.dir}/filter.properties" summary="true"/>
	</target>

	<target name="init" depends="set-additional-properties,prepair-local">
		<available file="${configuration.properties}" property="configuration.properties.present" />
		<fail unless="configuration.properties.present">
      		${configuration.properties} file is not present. You have a sample ${configuration.properties}-sample. Please copy this file under correct name and customize it.
    	</fail>

		<tstamp />

		<mkdir dir="${jlibs.dir}" />
		<mkdir dir="${jlibs.tests.dir}" />
		<mkdir dir="${javadoc.dir}" />
		<mkdir dir="${local.dir}" />
		<mkdir dir="${reports.tests.html.dir}" />
	</target>

	<target name="clean">
		<subprojectsRunTarget target="clean"/>
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${jlibs.dir}" />
			<fileset dir="${javadoc.dir}" />
			<fileset dir="${local.dir}" />
			<fileset dir="${reports.dir}" />
			<fileset file="${app.name}.war" />
		</delete>
	</target>

	<target name="compile" depends="init">
		<subprojectsNoMiscRunTarget target="compile" />
	</target>

	<target name="package" depends="compile">
		<subprojectsNoMiscRunTarget target="package"/>
		<subprojectsNoMiscCopy todir="${jlibs.dir}" fromdir="${jlibs.dir}" includes="*"/>
	</target>

	<target name="compile-tests" depends="compile">
		<subprojectsNoMiscRunTarget target="compile-tests" />
	</target>

	<target name="package-tests" depends="compile-tests">
		<subprojectsNoMiscRunTarget target="package-tests" />
		<subprojectsNoMiscCopy todir="${jlibs.tests.dir}" fromdir="${jlibs.tests.dir}" includes="*"/>
	</target>

	<target name="run-tests" depends="package,package-tests">
		<subprojectsNoMiscRunTarget target="run-tests" />
	</target>

	<target name="tests-report" depends="run-tests">
		<subprojectsNoMiscCopy todir="${reports.tests.dir}" fromdir="${reports.tests.dir}" includes="**/*"/>
		<junitreport todir="${reports.tests.html.dir}">
			<fileset dir="${reports.tests.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.tests.html.dir}" />
		</junitreport>
	</target>

	<target name="show-tests-report" depends="tests-report">
		<taskdef name="openURI" classname="hr.fer.zemris.vhdllab.ant.OpenURITask"
			classpath="${vhdllab.misc.jar}" />
		<!-- NOTE: uri must be composed of basedir! -->
		<openURI uri="file:${basedir}/${reports.tests.html.dir}/index.html"/>
	</target>

	<target name="javadoc">
		<mkdir dir="src-all"/>
		<subprojectsNoMiscCopy todir="src-all" fromdir="src/main" includes="**/*"/>
		<javadoc destdir="${javadoc.dir}" author="true" nodeprecated="false"
			nodeprecatedlist="false" noindex="false" nonavbar="false"
			notree="false" packagenames="*" splitindex="true"
			use="true" version="true" encoding="UTF-8">
			<classpath>
				<path>
					<fileset dir="${libs.dir}" />
				</path>
			</classpath>
			<fileset dir="src-all" includes="**/*.java"/>
			<link href="http://java.sun.com/javase/6/docs/api/" />
		</javadoc>
 		<delete includeemptydirs="true">
			<fileset dir="src-all" />
		</delete>
	</target>

	<target name="schema-export" depends="package">
		<input validargs="y,n" addproperty="hibernate.run.task">Danger! Running this task will destroy existing database shema at address '${database.url}' and create a new one. Loss of data is imminent! Are you sure you want to proceed?</input>
		<condition property="do.abort">
			<equals arg1="n" arg2="${hibernate.run.task}" />
		</condition>
		<fail if="do.abort">Build aborted by user.</fail>

		<taskdef name="hibernatetool" 
		        classname="org.hibernate.tool.ant.HibernateToolTask">
			<classpath>
				<fileset dir="${libs.dir}" includes="**/*.jar" />
			</classpath>
		</taskdef>

		<hibernatetool destdir="${local.dir}">
			<classpath>
 				<pathelement location="${jlibs.dir}/vhdllab-dao.jar"/> <!-- for DBCP connection provider -->
				<pathelement location="${jlibs.dir}/vhdllab-entities.jar"/>
				<pathelement location="${server.log4j.dir}"/>
			</classpath>
			<jpaconfiguration/>
			<hbm2ddl export="true" outputfilename="sql.ddl" drop="true"/>
		</hibernatetool>
	</target>

	<target name="tomcat" depends="package">
		<fail unless="tomcat.dir">Tomcat directory not set! Edit this information in configuration.properties file.
  	</fail>
		<property name="tomcat.app.dir" value="${tomcat.dir}/webapps/${app.name}" />
		<mkdir dir="${tomcat.app.dir}" />
		<mkdir dir="${tomcat.app.dir}/WEB-INF" />
		<mkdir dir="${tomcat.app.dir}/WEB-INF/lib" />
		<mkdir dir="${tomcat.app.dir}/WEB-INF/classes" />

		<copy todir="${tomcat.app.dir}" overwrite="true">
			<fileset file="${basedir}/html/*" />
			<!-- TODO this is only temporary: -->
			<fileset file="${basedir}/html/pages/*" />
			<!-- END TEMPORARY -->
			<fileset dir="." includes="images/**/*" />
			<fileset file="${basedir}/${jlibs.dir}/${app.name}-web-onClient.jar" />
			<fileset file="${basedir}/${libs.dir}/commons-digester.jar" />
			<fileset file="${basedir}/${libs.dir}/commons-httpclient.jar" />
			<fileset file="${basedir}/${libs.dir}/commons-codec.jar" />
			<fileset file="${basedir}/${libs.dir}/hibernate/commons-collections.jar" />
			<fileset file="${basedir}/${libs.dir}/hibernate/commons-logging.jar" />
			<fileset file="${basedir}/${libs.dir}/hibernate/log4j.jar" />
			<fileset file="${basedir}/${libs.dir}/xdoclet/commons-beanutils.jar" />
			<fileset file="${basedir}/${local.dir}/.java.policy" />
		</copy>

		<copy todir="${tomcat.app.dir}/WEB-INF" overwrite="true">
			<fileset dir="${basedir}/local/web" />
		</copy>

		<copy todir="${tomcat.app.dir}/WEB-INF/lib" overwrite="true">
			<fileset file="${basedir}/${jlibs.dir}/${app.name}-dao.jar" />
			<fileset file="${basedir}/${jlibs.dir}/${app.name}-service.jar" />
			<fileset file="${basedir}/${jlibs.dir}/${app.name}-web-onServer.jar" />
			<fileset file="${basedir}/${libs.dir}/*.*" excludes="servlet-api.jar" />
			<fileset file="${basedir}/${libs.dir}/hibernate/*.*" />
			<fileset file="${basedir}/${libs.dir}/mysql/*.*" />
			<fileset file="${basedir}/${libs.dir}/xdoclet/*.*" />
		</copy>

		<copy todir="${tomcat.app.dir}/WEB-INF/classes" overwrite="true">
			<fileset file="${client.log4j.file}" />
		</copy>

		<available property="java.policy.exists" file="${user.home}/.java.policy" />
		<condition property="should.override.java.policy">
			<and>
				<isset property="java.policy.exists" />
				<equals arg1="true" arg2="${override.java.policy}" casesensitive="false" trim="true" />
			</and>
		</condition>
		<condition property="dont.override.java.policy">
			<and>
				<isset property="java.policy.exists" />
				<or>
					<not>
						<isset property="override.java.policy" />
					</not>
					<equals arg1="false" arg2="${override.java.policy}" casesensitive="false" trim="true" />
				</or>
			</and>
		</condition>
		<antcall target="copy-java-policy-doesnt-exist" />
		<antcall target="override-java-policy" />
		<antcall target="dont-override-java-policy" />

	</target>

	<target name="copy-java-policy-doesnt-exist" unless="java.policy.exists">
		<echo>File '.java.policy' does not exists in ${user.home}. Copying file...</echo>
		<copy todir="${user.home}" verbose="true">
			<fileset file="${local.dir}/.java.policy" />
		</copy>
	</target>

	<target name="override-java-policy" if="should.override.java.policy">
		<echo>Overring file '${user.home}${file.separator}.java.policy' with '.${file.separator}${local.dir}${file.separator}.java.policy'</echo>
		<copy todir="${user.home}" overwrite="true" verbose="true">
			<fileset file="${local.dir}/.java.policy" />
		</copy>
	</target>

	<target name="dont-override-java-policy" if="dont.override.java.policy">
		<echo>Modify your existing '${user.home}${file.separator}.java.policy' so that it contains contents of '.${file.separator}${local.dir}${file.separator}.java.policy'</echo>
	</target>

	<target name="clean-tomcat">
		<property name="tomcat.app.dir" value="${tomcat.dir}${file.separator}webapps${file.separator}${app.name}" />
		<delete quiet="true" includeEmptyDirs="true">
			<fileset dir="${tomcat.app.dir}" />
		</delete>
	</target>

	<target name="run-tomcat" depends="kill-tomcat,tomcat">
		<property environment="env" />
		<echo>${env.CATALINA_HOME}</echo>
<!-- 		<exec executable="${tomcat.dir}${file.separator}bin${file.separator}${tomcat.exec}" spawn="true">
		</exec>
-->	</target>

	<target name="deploy" depends="war">
		<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"
			classpathref="server.class.path"/>

		<deploy url="${url}" username="${username}" password="${password}"
	            path="${path}" war="file:${build}${path}.war" update="true"/>
	</target>

	<target name="kill-tomcat">
		<exec executable="${tomcat.dir}${file.separator}bin${file.separator}${tomcat.shutdown.exec}" spawn="true">
		</exec>
	</target>

	<target name="war" depends="package">
		<war destfile="${app.name}.war" webxml="${local.dir}/web/web.xml">

			<!-- TODO: When security constraints are in place vhdllab.html will
    	have to be excluded from war (also its jar dependencies) -->
			<fileset dir="${html.pages.dir}" includes="*" />
			<fileset dir="." includes="images/**/*" />
			<fileset dir="${jlibs.dir}" includes="vhdllab-web-onClient.jar" />
			<fileset dir="${libs.dir}" includes="commons-digester.jar" />
			<fileset dir="${libs.dir}" includes="commons-httpclient.jar" />
			<fileset dir="${libs.dir}" includes="commons-codec.jar" />
			<fileset dir="${libs.dir}/xdoclet" includes="commons-beanutils.jar" />
			<fileset dir="${libs.dir}/hibernate" includes="commons-collections.jar,commons-logging.jar" />
			<fileset file="${basedir}/${libs.dir}/hibernate/log4j.jar" />
			<fileset dir="${local.dir}" includes=".java.policy" />
			<lib dir="${jlibs.dir}" includes="*.jar" />
			<lib dir="${libs.dir}" includes="*.jar" />
			<lib dir="${libs.dir}/hibernate" includes="*.jar" />
			<lib dir="${libs.dir}/mysql" includes="*.jar" />
			<lib dir="${libs.dir}/xdoclet" includes="*.jar" />
			<classes file="${client.log4j.file}" />
		</war>
	</target>
	
	<!-- ======= META TARGETS ============================================= -->

	<target name="test" depends="run-tests,show-tests-report" />

	<target name="clean-all" depends="clean,clean-tomcat" />

	<target name="hibernate" depends="schema-export" />

	<target name="install" depends="hibernate, war" />

	<target name="all" depends="package,javadoc,show-tests-report" />

	<target name="rebuild" depends="clean,package" />

	<target name="rebuild-all" depends="clean,package,javadoc,show-tests-report" />

	<target name="rebuild-doc" depends="clean,javadoc" />

</project>