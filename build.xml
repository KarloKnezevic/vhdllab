<?xml version='1.0' encoding='utf-8'?>
<project name="vhdllab" basedir="." default="default">

  <property name="configuration.properties" value="./configuration.properties"/>
  <property file="${configuration.properties}"/>

  <path id="src.class.path">
    <fileset dir="${lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement path="${build.dir}/dao"/>
    <pathelement path="${build.dir}/service"/>
    <pathelement path="${build.dir}/web/onServer"/>
    <pathelement path="${build.dir}/web/onClient"/>
  	<pathelement path="${build.dir}/tests/common"/>
    <pathelement path="${build.dir}/tests/dao"/>
    <pathelement path="${build.dir}/tests/service"/>
    <pathelement path="${build.dir}/tests/web/onServer"/>
    <pathelement path="${build.dir}/tests/web/onClient"/>
  	<pathelement path="${build.dir}/i18n"/>
	<pathelement path="${build.dir}/i18n/common"/>
	<pathelement path="${build.dir}/common"/>
  	<pathelement path="${local.dir}"/>
  </path>

  <target name="init">
    <available file="${configuration.properties}" property="configuration.properties.present"/>
    <fail unless="configuration.properties.present">
      ${configuration.properties} file is not present. You have a sample ${configuration.properties}-sample. Please copy this file under correct name and customize it.
    </fail>

    <available file="${lib.dir}/junit.jar" property="junit.jar.present"/>
    <fail unless="junit.jar.present">
      "${lib.dir}/junit.jar" file is not present. You can download it from http://www.junit.org.
    </fail>

    <available file="${lib.dir}/plugin.jar" property="plugin.jar.present"/>
    <fail unless="plugin.jar.present">
      "${lib.dir}/plugin.jar" file is not present. You can copy it from $JAVA_HOME/jre/lib/plugin.jar or $JRE_HOME/lib/plugin.jar.
    </fail>

    <available file="${lib.dir}/servlet-api.jar" property="servlet-api.jar.present"/>
    <fail unless="servlet-api.jar.present">
      "${lib.dir}/servlet-api.jar" file is not present. You can copy it from $CATALINA_HOME/common/lib/servlet-api.jar.
    </fail>

 	<tstamp/>
    
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/dao"/>
    <mkdir dir="${build.dir}/service"/>
    <mkdir dir="${build.dir}/web/onServer"/>
  	<mkdir dir="${build.dir}/web/onClient"/>
    <mkdir dir="${build.dir}/tests/dao"/>
    <mkdir dir="${build.dir}/tests/service"/>
    <mkdir dir="${build.dir}/tests/web/onServer"/>
    <mkdir dir="${build.dir}/tests/web/onClient"/>
    <mkdir dir="${jlib.dir}"/>
    <mkdir dir="${jlib-tests.dir}"/>
    <mkdir dir="${doc.dir}"/>
    <mkdir dir="${local.dir}"/>
    <mkdir dir="${hibernate.dir}"/>
  	<mkdir dir="${reports}"/>
  	<mkdir dir="${reports.tests}"/>
  	<mkdir dir="${reports.tests.html}"/>
  	
  	<sync todir="${local.dir}" overwrite="true">
		<fileset dir="${metadata.dir}" />  	
  	</sync>
  	
  	<replace dir="${local.dir}" propertyfile="${configuration.properties}">
  	  <replacefilter token="@@database.dialect@@" property="database.dialect"/>
	  <replacefilter token="@@database.driver@@" property="database.driver"/>
	  <replacefilter token="@@database.url@@" property="database.url"/>
   	  <replacefilter token="@@database.normal.username@@" property="database.normal.username"/>
   	  <replacefilter token="@@database.normal.password@@" property="database.normal.password"/>
	  <replacefilter token="@@database.show.sql@@" property="database.show.sql"/>
	  <replacefilter token="@@database.use.reflection.optimizer@@" property="database.use.reflection.optimizer"/>
  	  <replacefilter token="@@database.connection.pool.size@@" property="database.connection.pool.size"/>
  	  <replacefilter token="@@database.hbm2ddl.auto@@" property="database.hbm2ddl.auto"/>
      <replacefilter token="@@hibernate.cache.use_query_cache@@" property="hibernate.cache.use_query_cache"/>
      <replacefilter token="@@hibernate.cache.provider_class@@" property="hibernate.cache.provider_class"/>
      <replacefilter token="@@hibernate.query.substitutions@@" property="hibernate.query.substitutions"/>
  	</replace>
  	
  	<replace file="${local.dir}/.java.policy" propertyfile="${configuration.properties}">
  	  <replacefilter token="@@vhdllab.server@@" property="app.host"/>
	  <replacefilter token="@@http.port@@" property="http.port"/>
	  <replacefilter token="@@https.port@@" property="https.port"/>
  	  <replacefilter token="@@vhdllab.name@@" property="app.name"/>
  	</replace>
  	
  	<replace dir="${local.dir}" propertyfile="${configuration.properties}" includes="**/*">
  	  <replacefilter token="@@app.name@@" property="app.name"/>
	  <replacefilter token="@@app.host@@" property="app.host"/>
	  <replacefilter token="@@http.port@@" property="http.port"/>
	  <replacefilter token="@@https.port@@" property="https.port"/>
	  <replacefilter token="@@app.communication.protocol@@" property="app.communication.protocol"/>
	  <replacefilter token="@@app.communication.port@@" property="app.communication.port"/>
	  <replacefilter token="@@app.homepage@@" property="app.homepage"/>
  	  <replacefilter token="@@jnlp.file@@" property="jnlp.file"/>
  	  <replacefilter token="@@app.main.class@@" property="app.main.class"/>
  	  <replacefilter token="@@app.splash@@" property="app.splash"/>
  	  <replacefilter token="@@app.icon@@" property="app.icon"/>
  	  <replacefilter token="@@app.client.archive@@" property="app.client.archive"/>
  	</replace>

  	<replace dir="${local.dir}/web" propertyfile="${configuration.properties}">
  	  <replacefilter token="@@app.name@@" property="app.name"/>
  	  <replacefilter token="@@app.title@@" property="app.title"/>
	  <replacefilter token="@@app.host@@" property="app.host"/>
	  <replacefilter token="@@http.port@@" property="http.port"/>
	  <replacefilter token="@@https.port@@" property="https.port"/>
	  <replacefilter token="@@app.communication.protocol@@" property="app.communication.protocol"/>
	  <replacefilter token="@@app.communication.port@@" property="app.communication.port"/>
	  <replacefilter token="@@app.homepage@@" property="app.homepage"/>
	  <replacefilter token="@@jnlp.file@@" property="jnlp.file"/>
	  <replacefilter token="@@app.client.archive@@" property="app.client.archive"/>
	  <replacefilter token="@@app.vendor@@" property="app.vendor"/>
	  <replacefilter token="@@jnlp.update.policy@@" property="jnlp.update.policy"/>
	  <replacefilter token="@@jnlp.vm.parameter@@" property="jnlp.vm.parameter"/>
	  <replacefilter token="@@app.main.class@@" property="app.main.class"/>
  	</replace>
  	
  	<copy todir="${build.dir}">
  	  <fileset file="${local.dir}/log4j.properties"/>
  	</copy>
  </target>

  <target name="clean">
   <delete quiet="true" includeEmptyDirs="true">
      <fileset dir="${build.dir}"/>
      <fileset dir="${jlib-tests.dir}"/>
	  <fileset dir="${jlib.dir}"/>
      <fileset dir="${doc.dir}"/>
      <fileset dir="${hibernate.hbm.dir}"/>
      <fileset dir="${local.dir}"/>
   	  <fileset dir="${reports.tests.html}"/>
   	  <fileset dir="${reports.tests}"/>
   	  <fileset dir="${reports}"/>
   	  <fileset file="${app.name}.war"/>
    </delete>
  </target>

  <target name="compile-dao" depends="init">
    <javac destdir="${build.dir}/dao" includes="**/*.java" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source" encoding="UTF-8">
      <src path="src/dao"/>
      <src path="src/common"/>
      <classpath refid="src.class.path"/>
    </javac>
  </target>

  <target name="compile-service" depends="compile-dao">
    <javac destdir="${build.dir}/service" includes="**/*.java" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source" encoding="UTF-8">
      <src path="src/service"/>
      <src path="src/common"/>
      <classpath refid="src.class.path"/>
    </javac>
  </target>

  <target name="compile-web-onServer" depends="compile-service">
    <javac destdir="${build.dir}/web/onServer" includes="**/*.java" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source" encoding="UTF-8">
      <src path="src/web/onServer"/>
      <src path="src/common"/>
      <src path="src/i18n/common"/>
      <classpath refid="src.class.path"/>
    </javac>
  </target>
	
  <target name="compile-web-onClient" depends="compile-service">
    <javac destdir="${build.dir}/web/onClient" includes="**/*.java" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source" encoding="UTF-8">
      <src path="src/web/onClient"/>
      <src path="src/common"/>
      <src path="src/i18n/common"/>
      <classpath refid="src.class.path"/>
    </javac>
  </target>

  <target name="package-dao" depends="compile-dao,hibernate-hbm">
    <jar destfile="${jlib.dir}/${app.name}-dao.jar" index="true">
      <fileset dir="${build.dir}/dao" includes="**/*.class"/>
      <fileset dir="src/dao" excludes="**/*.java,**/*svn/**,**/*svn"/>
      <fileset dir="src/common" excludes="**/*.java,**/*svn/**,**/*svn"/>
	  <fileset dir="${hibernate.dir}"/>
    </jar>
  </target>

  <target name="package-service" depends="compile-service">
    <jar destfile="${jlib.dir}/${app.name}-service.jar" index="true">
      <fileset dir="${build.dir}/service" includes="**/*.class"/>
      <fileset dir="src/service" excludes="**/*.java,**/*svn/**,**/*svn"/>
      <fileset dir="src/common" excludes="**/*.java,**/*svn/**,**/*svn"/>
    </jar>
  </target>

  <target name="package-web-onServer" depends="compile-web-onServer">
  	<jar destfile="${jlib.dir}/${app.name}-web-onServer.jar" index="true">
  	  <fileset dir="${build.dir}/web/onServer" includes="**/*.class"/>
      <fileset dir="src/web/onServer" excludes="**/*.java,**/*svn/**,**/*svn"/>
      <fileset dir="src/common" excludes="**/*.java,**/*svn/**,**/*svn"/>
      <fileset dir="src/i18n/server" excludes="**/*svn/**,**/*svn"/>
  	</jar>
  </target>
  
  <target name="package-web-onClient" depends="compile-web-onClient">
  	<jar destfile="${jlib.dir}/${app.name}-web-onClient.jar"
  		manifest="local/onClient/META-INF/MANIFEST.MF" index="true">
  	  <fileset dir="${build.dir}/web/onClient" includes="**/*.class"/>
      <fileset dir="src/web/onClient" excludes="**/*.java,**/*svn/**,**/*svn"/>
      <fileset dir="src/common" excludes="**/*.java,**/*svn/**,**/*svn"/>
   	  <fileset dir="src/i18n/client" excludes="**/*svn/**,**/*svn"/>
   	  <fileset dir="." includes="images/**/*" excludes="**/*svn/**,**/*svn"/>
   	  <fileset file="local/onClient/server.properties"/>
   	  <fileset file="local/log4j.properties"/>
   	  <metainf dir="metadata/onClient/META-INF" excludes="**/*svn/**,**/*svn"/>
  	</jar>
  </target>
  
  <target name="compile-tests-dao" depends="compile-dao">
    <javac destdir="${build.dir}/tests/dao" includes="**/*java" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source" encoding="UTF-8">
      <src path="src/tests/dao"/>
      <src path="src/tests/common"/>
      <classpath refid="src.class.path"/>
    </javac>
  </target>
	
  <target name="compile-tests-service" depends="compile-service">
    <javac destdir="${build.dir}/tests/service" includes="**/*java" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source" encoding="UTF-8">
      <src path="src/tests/service"/>
      <src path="src/tests/common"/>
      <classpath refid="src.class.path"/>
    </javac>
  </target>

  <target name="compile-tests-web-onServer" depends="compile-web-onServer">
    <javac destdir="${build.dir}/tests/web/onServer" includes="**/*java" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source" encoding="UTF-8">
      <src path="src/tests/web/onServer"/>
      <src path="src/tests/common"/>
      <classpath refid="src.class.path"/>
    </javac>
  </target>

  <target name="compile-tests-web-onClient" depends="compile-web-onClient">
    <javac destdir="${build.dir}/tests/web/onClient" includes="**/*java" includeAntRuntime="false" debug="true" debuglevel="lines,vars,source" encoding="UTF-8">
      <src path="src/tests/web/onClient"/>
      <src path="src/tests/common"/>
      <classpath refid="src.class.path"/>
    </javac>
  </target>

  <target name="package-tests-dao" depends="compile-tests-dao">
    <jar destfile="${jlib-tests.dir}/${app.name}-tests-dao.jar" index="true">
      <fileset dir="${build.dir}/tests/dao" includes="**/*.class"/>
    </jar>
  </target>
	
  <target name="package-tests-service" depends="compile-tests-service">
    <jar destfile="${jlib-tests.dir}/${app.name}-tests-service.jar" index="true">
      <fileset dir="${build.dir}/tests/service" includes="**/*.class"/>
    </jar>
  </target>
	
  <target name="package-tests-web-onServer" depends="compile-tests-web-onServer">
    <jar destfile="${jlib-tests.dir}/${app.name}-tests-web-onServer.jar" index="true">
      <fileset dir="${build.dir}/tests/web/onServer" includes="**/*.class"/>
    </jar>
  </target>

  <target name="package-tests-web-onClient" depends="compile-tests-web-onClient">
    <jar destfile="${jlib-tests.dir}/${app.name}-tests-web-onClient.jar" index="true">
      <fileset dir="${build.dir}/tests/web/onClient" includes="**/*.class"/>
  	  <fileset dir="${local.dir}" includes="log4j.properties"/>
    </jar>
  </target>
	
  <target name="run-tests-dao" depends="package-server,package-tests-dao" if="junit.jar.present">
  	<junit fork="no" printsummary="no" haltonfailure="no" haltonerror="no">
  	  <classpath>
        <pathelement location="${jlib.dir}/${app.name}-web-onServer.jar"/>
	  	<pathelement location="${jlib.dir}/${app.name}-service.jar"/>
      	<pathelement location="${jlib.dir}/${app.name}-dao.jar"/>
        <pathelement location="${jlib-tests.dir}/${app.name}-tests-dao.jar"/>
        <pathelement location="${java.class.path}"/>
      	<path refid="src.class.path"/>
  	  </classpath>

  	  <formatter type="xml"/>

  	  <batchtest fork="no" todir="${reports.tests}">
  	    <fileset dir="${build.dir}/tests/dao">
  	      <include name="**/*Test*.class"/>
  	      <exclude name="**/All*Tests.class"/>
    	  <exclude name="**/TestManager.class"/>
  	    </fileset>
  	  </batchtest>
  	</junit>
  </target>
	
  <target name="run-tests-service" depends="package-server,package-tests-service" if="junit.jar.present">
  	<junit fork="no" printsummary="no" haltonfailure="no" haltonerror="no">
	  <classpath>
        <pathelement location="${jlib.dir}/${app.name}-web-onServer.jar"/>
	  	<pathelement location="${jlib.dir}/${app.name}-service.jar"/>
      	<pathelement location="${jlib.dir}/${app.name}-dao.jar"/>
        <pathelement location="${jlib-tests.dir}/${app.name}-tests-service.jar"/>
        <pathelement location="${java.class.path}"/>
      	<path refid="src.class.path"/>
	  </classpath>
	
	  <formatter type="xml"/>
	
	  <batchtest fork="no" todir="${reports.tests}">
	    <fileset dir="${build.dir}/tests/service">
	      <include name="**/*Test*.class"/>
	      <exclude name="**/All*Tests.class"/>
	      <exclude name="**/TestManager.class"/>
	    </fileset>
	  </batchtest>
	</junit>
  </target>
     
  <target name="run-tests-web-onServer" depends="package-server,package-tests-web-onServer" if="junit.jar.present">
  	<junit fork="no" printsummary="no" haltonfailure="no" haltonerror="no">
	  <classpath>
        <pathelement location="${jlib.dir}/${app.name}-web-onServer.jar"/>
      	<pathelement location="${jlib.dir}/${app.name}-service.jar"/>
      	<pathelement location="${jlib.dir}/${app.name}-dao.jar"/>
        <pathelement location="${jlib-tests.dir}/${app.name}-tests-web-onServer.jar"/>
        <pathelement location="${java.class.path}"/>
      	<path refid="src.class.path"/>
	  </classpath>
	
	  <formatter type="xml"/>
	
	  <batchtest fork="no" todir="${reports.tests}">
	    <fileset dir="${build.dir}/tests/web/onServer">
	      <include name="**/*Test*.class"/>
	      <exclude name="**/All*Tests.class"/>
	   	  <exclude name="**/TestManager.class"/>
	    </fileset>
	  </batchtest>
	</junit>
  </target>
	
  <target name="run-tests-web-onClient" depends="package-client,package-tests-web-onClient" if="junit.jar.present">
  	<junit fork="no" printsummary="no" haltonfailure="no" haltonerror="no">
	  <classpath>
        <pathelement location="${jlib.dir}/${app.name}-web-onClient.jar"/>
        <pathelement location="${jlib-tests.dir}/${app.name}-tests-web-onClient.jar"/>
        <pathelement location="${java.class.path}"/>
      	<path refid="src.class.path"/>
	  </classpath>
	
	  <formatter type="xml"/>
	
	  <batchtest fork="no" todir="${reports.tests}">
	    <fileset dir="${build.dir}/tests/web/onClient">
	      <include name="**/*Test*.class"/>
	      <exclude name="**/All*Tests.class"/>
    	  <exclude name="**/TestManager.class"/>
	    </fileset>
	  </batchtest>
	</junit>
  </target>
	
  <target name="tests-report">
  	<junitreport todir="${reports.tests.html}">
      <fileset dir="${reports.tests}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${reports.tests.html}"/>
	</junitreport>
  </target>

  <target name="show-tests-report" depends="tests-report">
    <exec executable="${browser.exec}" spawn="true">
      <arg line="./${reports.tests.html}/index.html"/>
    </exec>
  </target>

  <target name="doc">
  	<javadoc 
  		access="public"
  		author="true"
  		classpathref="src.class.path"
  		destdir="${doc.dir}"
  		nodeprecated="false"
  		nodeprecatedlist="false"
  		noindex="false"
  		nonavbar="false"
  		notree="false"
  		packagenames="*"
  		source="1.5"
  		sourcepath="src/dao;src/service;src/web/onServer;src/web/onClient;src/i18n/common;src/common"
  		splitindex="true"
  		use="true"
  		version="true">
	  <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
	</javadoc>
  </target>

  <target name="hibernate-hbm" depends="compile-dao">
    <taskdef name="xdoclet"
      classname="org.xdoclet.ant.XDocletTask"
      classpathref="src.class.path">
  	</taskdef>

	<xdoclet encoding="UTF-8">
	  <fileset dir="${model.dir}">
		<include name="**/*.java"/>
	  </fileset>
      <component
		classname="org.xdoclet.plugin.hibernate.HibernateMappingPlugin"
      	encoding="UTF-8"
		destdir="${hibernate.dir}"
		force="${hibernate.hbm.force}"
      	version="${hibernate.hbm.version}">
	  </component>

	  <component
	  	classname="org.xdoclet.plugin.hibernate.HibernateConfigPlugin"
	  	destdir="${hibernate.dir}"
	  	properties="${hibernate.dir}/hibernate.properties">
      </component>
	</xdoclet>

  	<replace dir="${hibernate.dir}">
  	  <include name="**/*.hbm.xml"/>
	  <replacetoken>access="method" </replacetoken>
  	</replace>
  	
  	<copy todir="bin">
  	  <fileset dir="${local.dir}">
  	  	<include name="*.*"/>
  	  </fileset>
  	  <fileset dir="${hibernate.dir}"/>
  	</copy>
  </target>
  	
  <target name="schema-export" depends="hibernate-hbm">
  	<input validargs="y,n"
  		addproperty="hibernate.run.task">Danger! Running this task will destroy existing database shema at address '${database.url}' and create a new one. Loss of data is imminent! Are you sure you want to proceed?</input>
  	<condition property="do.abort">
  	  <equals arg1="n" arg2="${hibernate.run.task}"/>
  	</condition>
  	<fail if="do.abort">Build aborted by user.</fail>

  	<taskdef name="schemaexport"
      classname="net.sf.hibernate.tool.hbm2ddl.SchemaExportTask"
      classpathref="src.class.path">
  	</taskdef>

  	<schemaexport
	  properties="${hibernate.dir}/hibernate.properties"
  	  quiet="no"
  	  text="no"
  	  drop="no"
  	  delimiter=";"
  	  output="${hibernate.dir}/schema-export.sql">
  	  <fileset dir="${hibernate.dir}">
 		<include name="**/*.hbm.xml"/>
  	  </fileset>
	</schemaexport>
  </target>
	
  <target name="tomcat" depends="package">
  	<fail unless="tomcat.dir">Tomcat directory not set! Edit this information in configuration.properties file.
  	</fail>
  	<property name="tomcat.app.dir" value="${tomcat.dir}/webapps/${app.name}"/>
  	<mkdir dir="${tomcat.app.dir}"/>
  	<mkdir dir="${tomcat.app.dir}/WEB-INF"/>
  	<mkdir dir="${tomcat.app.dir}/WEB-INF/lib"/>
  	<mkdir dir="${tomcat.app.dir}/WEB-INF/classes"/>
  	
    <copy todir="${tomcat.app.dir}" overwrite="true">
      <fileset file="${basedir}/html/*"/>
      <!-- TODO this is only temporary: -->
      <fileset file="${basedir}/html/pages/*"/>
      <!-- END TEMPORARY -->
      <fileset dir="." includes="images/**/*"/>
      <fileset file="${basedir}/${jlib.dir}/${app.name}-web-onClient.jar"/>
      <fileset file="${basedir}/${lib.dir}/commons-digester.jar"/>
      <fileset file="${basedir}/${lib.dir}/commons-httpclient.jar"/>
      <fileset file="${basedir}/${lib.dir}/commons-codec.jar"/>
      <fileset file="${basedir}/${lib.dir}/hibernate/commons-collections.jar"/>
	  <fileset file="${basedir}/${lib.dir}/hibernate/commons-logging.jar"/>
	  <fileset file="${basedir}/${lib.dir}/hibernate/log4j.jar"/>
      <fileset file="${basedir}/${lib.dir}/xdoclet/commons-beanutils.jar"/>
      <fileset file="${basedir}/${local.dir}/.java.policy"/>
    </copy>
  	
    <copy todir="${tomcat.app.dir}/WEB-INF" overwrite="true">
      <fileset dir="${basedir}/local/web"/>
    </copy>

  	<copy todir="${tomcat.app.dir}/WEB-INF/lib" overwrite="true">
      <fileset file="${basedir}/${jlib.dir}/${app.name}-dao.jar"/>
      <fileset file="${basedir}/${jlib.dir}/${app.name}-service.jar"/>
      <fileset file="${basedir}/${jlib.dir}/${app.name}-web-onServer.jar"/>
      <fileset file="${basedir}/${lib.dir}/*.*" excludes="servlet-api.jar"/>
      <fileset file="${basedir}/${lib.dir}/hibernate/*.*"/>
      <fileset file="${basedir}/${lib.dir}/mysql/*.*"/>
      <fileset file="${basedir}/${lib.dir}/xdoclet/*.*"/>
    </copy>
  	
  	<copy todir="${tomcat.app.dir}/WEB-INF/classes" overwrite="true">
  	  <fileset file="${local.dir}/log4j.properties"/>
  	</copy>
  	
  	<available property="java.policy.exists" file="${user.home}/.java.policy" />
  	<condition property="should.override.java.policy">
  	  <and>
  	  	<isset property="java.policy.exists" />
  	  	<equals arg1="true" arg2="${override.java.policy}" casesensitive="false" trim="true"/>
  	  </and>
  	</condition>
  	<condition property="dont.override.java.policy">
  	  <and>
  	  	<isset property="java.policy.exists" />
  	  	<or>
  	  	  <not>
			<isset property="override.java.policy" />
  	  	  </not>
 	  	  <equals arg1="false" arg2="${override.java.policy}" casesensitive="false" trim="true"/>
  	  	</or>
  	  </and>
  	</condition>
  	<antcall target="copy-java-policy-doesnt-exist" />
  	<antcall target="override-java-policy" />
 	<antcall target="dont-override-java-policy" />
  	
  </target>
	
  <target name="copy-java-policy-doesnt-exist" unless="java.policy.exists">
  	<echo>File '.java.policy' does not exists in ${user.home}. Copying file...</echo>
  	<copy todir="${user.home}" verbose="true">
  	  <fileset file="${local.dir}/.java.policy"/>
  	</copy>
  </target>
	
  <target name="override-java-policy" if="should.override.java.policy">
  	<echo>Overring file '${user.home}${file.separator}.java.policy' with '.${file.separator}${local.dir}${file.separator}.java.policy'</echo>
  	<copy todir="${user.home}" overwrite="true" verbose="true">
  	  <fileset file="${local.dir}/.java.policy"/>
  	</copy>
  </target>
	
  <target name="dont-override-java-policy" if="dont.override.java.policy">
  	<echo>Modify your existing '${user.home}${file.separator}.java.policy' so that it contains contents of '.${file.separator}${local.dir}${file.separator}.java.policy'</echo>
  </target>
	
  <target name="clean-tomcat">
    <property name="tomcat.app.dir" value="${tomcat.dir}${file.separator}webapps${file.separator}${app.name}"/>
    <delete quiet="true" includeEmptyDirs="true">
      <fileset dir="${tomcat.app.dir}"/>
    </delete>
  </target>
	
  <target name="run-tomcat" depends="kill-tomcat,tomcat">
  	<property environment="env"/>
    <exec executable="${tomcat.dir}${file.separator}bin${file.separator}${tomcat.exec}"
    	spawn="true">
    </exec>
  </target>
	
  <target name="kill-tomcat">
    <exec executable="${tomcat.dir}${file.separator}bin${file.separator}${tomcat.shutdown.exec}"
    	spawn="true">
    </exec>
  </target>
	
  <target name="war" depends="package">
    <war destfile="${app.name}.war"
    	webxml="${local.dir}/web/web.xml">
    	
    <!-- TODO: When security constraints are in place vhdllab.html will
    	have to be excluded from war (also its jar dependencies) -->
   	<fileset dir="${html.pages.dir}" includes="*"/>
    <fileset dir="." includes="images/**/*"/>
    <fileset dir="${jlib.dir}" includes="vhdllab-web-onClient.jar"/>
    <fileset dir="${lib.dir}" includes="commons-digester.jar"/>
    <fileset dir="${lib.dir}" includes="commons-httpclient.jar"/>
    <fileset dir="${lib.dir}" includes="commons-codec.jar"/>
    <fileset dir="${lib.dir}/xdoclet" includes="commons-beanutils.jar"/>
    <fileset dir="${lib.dir}/hibernate" includes="commons-collections.jar,commons-logging.jar"/>
  	<fileset file="${basedir}/${lib.dir}/hibernate/log4j.jar"/>
    <fileset dir="${local.dir}" includes=".java.policy"/>
	<lib dir="${jlib.dir}" includes="*.jar"/>
    <lib dir="${lib.dir}" includes="*.jar"/>
    <lib dir="${lib.dir}/hibernate" includes="*.jar"/>
    <lib dir="${lib.dir}/mysql" includes="*.jar"/>
    <lib dir="${lib.dir}/xdoclet" includes="*.jar"/>
    <classes file="${local.dir}/log4j.properties"/>
    </war>
  </target>
	
  <target name="compile" depends="compile-dao,compile-service,compile-web-onServer,compile-web-onClient"/>
	
  <target name="compile-tests" depends="compile-tests-dao,compile-tests-service,compile-tests-web-onServer,compile-tests-web-onClient"/>
	
  <target name="package-server" depends="package-dao,package-service,package-web-onServer"/>
	
  <target name="package-client" depends="package-web-onClient"/>
	
  <target name="package" depends="package-server, package-client"/>

  <target name="package-tests" depends="package-tests-dao,package-tests-service,package-tests-web-onServer,package-tests-web-onClient"/>
	
  <target name="run-tests" depends="run-tests-dao,run-tests-service,run-tests-web-onServer,run-tests-web-onClient,show-tests-report"/>
	
  <target name="test" depends="run-tests,show-tests-report"/>

  <target name="clean-all" depends="clean, clean-tomcat"/>

  <target name="default" depends="package"/>
	
  <target name="hibernate" depends="schema-export"/>
	
  <target name="install" depends="hibernate, war"/>

  <target name="all" depends="package,doc,run-tests"/>
	
  <target name="rebuild" depends="clean,package"/>
	
  <target name="rebuild-all" depends="clean,package,doc,run-tests"/>
	
  <target name="rebuild-doc" depends="clean,doc"/>
  	
</project>