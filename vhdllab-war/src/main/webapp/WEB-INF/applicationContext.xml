<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:security="http://www.springframework.org/schema/security"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
                http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">

  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
    destroy-method="close">
    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    <property name="url" value="jdbc:mysql://localhost:3306/vhdllab2" />
    <property name="username" value="test" />
    <property name="password" value="a" />

    <property name="initialSize" value="2" />
    <property name="maxActive" value="20" />
    <property name="maxIdle" value="8" />
    <property name="maxWait" value="5000" />
    <property name="testOnBorrow" value="true" />
    <property name="testOnReturn" value="false" />
    <property name="validationQuery" value="SELECT 1" /> <!-- MySQL valid -->
    <property name="poolPreparedStatements" value="true" />
    <property name="maxOpenPreparedStatements" value="20" />
  </bean>

  <bean id="entityManagerFactory"
    class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="jpaVendorAdapter">
      <bean
        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="database" value="MYSQL" />
        <property name="showSql" value="false" />
      </bean>
    </property>
    <property name="jpaProperties">
      <props>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider
        </prop>
        <prop key="hibernate.cache.use_second_level_cache">true</prop>
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <prop key="hibernate.hbm2ddl.auto">update</prop>
      </props>
    </property>
  </bean>

  <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory" />
  </bean>

  <context:annotation-config />
  <tx:annotation-driven transaction-manager="transactionManager" />
  <aop:aspectj-autoproxy />

  <!-- Injects entityManagerFactory to HistoryListener so history can be created -->
  <bean class="hr.fer.zemris.vhdllab.entity.HistoryListenerConfigurer" />

  <!-- DAO classes -->
  <bean class="hr.fer.zemris.vhdllab.dao.impl.ProjectDaoImpl"
    autowire="autodetect" />

  <bean class="hr.fer.zemris.vhdllab.dao.impl.FileDaoImpl"
    autowire="autodetect" />

  <bean class="hr.fer.zemris.vhdllab.dao.impl.ClientLogDaoImpl"
    autowire="autodetect" />

  <bean class="hr.fer.zemris.vhdllab.dao.impl.PredefinedFilesDaoImpl"
    autowire="autodetect" />

  <!-- Service classes -->
  <bean id="workspaceService" class="hr.fer.zemris.vhdllab.service.impl.WorkspaceServiceImpl" />
  <bean id="clientLogService" class="hr.fer.zemris.vhdllab.service.impl.ClientLogServiceImpl" />
  <bean id="metadataExtractionService" class="hr.fer.zemris.vhdllab.service.impl.MetadataExtractionServiceImpl" />
  <bean id="simulator" class="hr.fer.zemris.vhdllab.service.impl.GhdlSimulator" init-method="configure">
    <property name="properties">
      <props>
        <prop key="executable">/usr/bin/ghdl</prop>
        <prop key="compiler.parameters">-a</prop>
        <prop key="simulator.parameters">--elab-run</prop>
        <prop key="tmpDir">/home/lord/tmp/vhdllab/simulations</prop>
      </props>
    </property>
  </bean>

  
  <!-- Aspects -->
  <bean class="hr.fer.zemris.vhdllab.service.aspect.EntitySecurityAspect" />
  <bean class="hr.fer.zemris.vhdllab.service.aspect.LogAspect" />

  
  
  <bean id="httpWorkspaceService"
        class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
    <property name="service">
      <ref bean="workspaceService"/>
    </property>
    <property name="serviceInterface">
      <value>hr.fer.zemris.vhdllab.service.WorkspaceService</value>
    </property>
  </bean>
  
  <bean id="httpClientLogService"
        class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
    <property name="service">
      <ref bean="clientLogService"/>
    </property>
    <property name="serviceInterface">
      <value>hr.fer.zemris.vhdllab.service.ClientLogService</value>
    </property>
  </bean>
  
  <bean id="httpMetadataExtractionService"
        class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
    <property name="service">
      <ref bean="metadataExtractionService"/>
    </property>
    <property name="serviceInterface">
      <value>hr.fer.zemris.vhdllab.service.MetadataExtractionService</value>
    </property>
  </bean>
  
  <bean id="httpSimulator"
        class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
    <property name="service">
      <ref bean="simulator"/>
    </property>
    <property name="serviceInterface">
      <value>hr.fer.zemris.vhdllab.service.Simulator</value>
    </property>
  </bean>
  
  <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
      <props>
        <prop key="/workspace.service">httpWorkspaceService</prop>
        <prop key="/clientlog.service">httpClientLogService</prop>
        <prop key="/metadataextraction.service">httpMetadataExtractionService</prop>
        <prop key="/simulator.service">httpSimulator</prop>
      </props>
    </property>
  </bean>
  
  
  
  
  
  
  <bean id="fileTypeBasedMetadataExtractor" class="hr.fer.zemris.vhdllab.service.impl.FileTypeBasedMetadataExtractor" />
  <bean id="sourceMetadataExtractor" class="hr.fer.zemris.vhdllab.service.filetype.source.SourceMetadataExtractor" />
  <bean id="schemaMetadataExtractor" class="hr.fer.zemris.vhdllab.service.filetype.schema.SchemaMetadataExtractor" />
  <bean id="automatonMetadataExtractor" class="hr.fer.zemris.vhdllab.service.filetype.automaton.AutomatonMetadataExtractor" />
  <bean id="testbenchMetadataExtractor" class="hr.fer.zemris.vhdllab.service.filetype.testbench.TestbenchMetadataExtractor" />
  
 
  
  
  
  <security:authentication-manager alias="authenticationManager"/>
<!--  <security:authentication-provider>-->
<!--    <security:user-service>-->
<!--      <security:user password="test" name="test" authorities="ROLE_STUDENT"/>-->
<!--      <security:user password="admin" name="admin" authorities="ROLE_ADMIN"/>-->
<!--    </security:user-service>-->
<!--  </security:authentication-provider>-->
  <security:http create-session="always" entry-point-ref="preAuthenticatedProcessingFilterEntryPoint">
    <security:intercept-url pattern="/remoting/*" access="ROLE_STUDENT,ROLE_ADMIN" requires-channel="https"/>
<!--    <security:http-basic/>-->
  </security:http>

    <bean id="preAuthenticatedAuthenticationProvider" class="org.springframework.security.providers.preauth.PreAuthenticatedAuthenticationProvider">
        <security:custom-authentication-provider />
        <property name="preAuthenticatedUserDetailsService" ref="preAuthenticatedUserDetailsService"/>
    </bean>

    <bean id="preAuthenticatedUserDetailsService"
            class="org.springframework.security.providers.preauth.PreAuthenticatedGrantedAuthoritiesUserDetailsService"/>
            
    <bean id="j2eePreAuthFilter" class="org.springframework.security.ui.preauth.j2ee.J2eePreAuthenticatedProcessingFilter">
        <security:custom-filter position="PRE_AUTH_FILTER" />
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationDetailsSource" ref="authenticationDetailsSource"/>
    </bean>
    
    <bean id="preAuthenticatedProcessingFilterEntryPoint"
            class="org.springframework.security.ui.preauth.PreAuthenticatedProcessingFilterEntryPoint"/>

    <bean id="authenticationDetailsSource" class="org.springframework.security.ui.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource">
        <property name="mappableRolesRetriever" ref="j2eeMappableRolesRetriever"/>
        <property name="userRoles2GrantedAuthoritiesMapper" ref="j2eeUserRoles2GrantedAuthoritiesMapper"/>
    </bean>

    <bean id="j2eeUserRoles2GrantedAuthoritiesMapper" class="org.springframework.security.authoritymapping.SimpleAttributes2GrantedAuthoritiesMapper">
        <property name="convertAttributeToUpperCase" value="true"/>
    </bean>

    <bean id="j2eeMappableRolesRetriever" class="org.springframework.security.ui.preauth.j2ee.WebXmlMappableAttributesRetriever">
        <property name="webXmlInputStream">
            <bean factory-bean="webXmlResource" factory-method="getInputStream"/>
        </property>
    </bean>

    <bean id="webXmlResource" class="org.springframework.web.context.support.ServletContextResource">
        <constructor-arg ref="servletContext"/>
        <constructor-arg value="/WEB-INF/web.xml"/>
    </bean>

    <bean id="servletContext" class="org.springframework.web.context.support.ServletContextFactoryBean"/>










</beans>