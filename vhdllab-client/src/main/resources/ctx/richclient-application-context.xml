<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

  <context:property-placeholder location="server.properties" />

  <bean id="application"
    class="hr.fer.zemris.vhdllab.platform.support.VhdllabApplication">
    <constructor-arg index="0" ref="applicationDescriptor" />
    <constructor-arg index="1" ref="lifecycleAdvisor" />
  </bean>

  <bean id="applicationDescriptor"
    class="org.springframework.richclient.application.support.DefaultApplicationDescriptor">
    <property name="version" value="${version}" />
    <property name="buildId" value="${buildId}" />
  </bean>

  <bean id="lifecycleAdvisor"
    class="hr.fer.zemris.vhdllab.platform.support.VhdllabLifecycleAdvisor">
    <property name="windowCommandBarDefinitions" value="ui/commands-context.xml" />
    <property name="startingPageId">
      <idref bean="initialPage" />
    </property>
    <property name="windowCommandManagerBeanName" value="windowCommandManager" />
    <property name="menubarBeanName" value="menuBar" />
    <property name="registerableExceptionHandler" ref="exceptionHandler" />
  </bean>

  <bean id="serviceLocator"
    class="org.springframework.richclient.application.ApplicationServicesLocator">
    <property name="applicationServices" ref="applicationServices" />
  </bean>

  <bean id="applicationServices"
    class="org.springframework.richclient.application.support.DefaultApplicationServices">
    <!--
      NOTE: The use of bean ids (idref) is preferred over using direct
      bean references to avoid startup problems with circular
      references.
    -->
    <property name="imageSourceId">
      <idref bean="imageSource" />
    </property>
    <property name="formComponentInterceptorFactoryId">
      <idref bean="formComponentInterceptorFactory" />
    </property>
    <property name="applicationObjectConfigurerId">
      <idref bean="applicationObjectConfigurer" />
    </property>
    <property name="applicationPageFactoryId">
      <idref bean="applicationPageFactory" />
    </property>
  </bean>

  <bean id="applicationPageFactory"
    class="hr.fer.zemris.vhdllab.platform.support.SimplisticEclipseBasedApplicationPageFactory" />

  <!--
    Bean: applicationEventMulticaster Type: magic Usage: platform
    required Description: This defines the object responsible for
    dispatching application events to all interested components. Unless
    you really know what you're doing, you should just include this as
    is.
  -->
  <bean id="applicationEventMulticaster"
    class="org.springframework.context.event.SimpleApplicationEventMulticaster" />

  <!--
    Bean: applicationObjectConfigurer Usage: platform required (because
    it is a bean post processor) Description: This defines the object
    responsible for configuring other objects constructed via the
    platform. This is a critical part of the I18N support.
  -->
  <bean id="applicationObjectConfigurer" depends-on="serviceLocator"
    class="org.springframework.richclient.application.config.DefaultApplicationObjectConfigurer">
  </bean>

  <!--
    Bean: lookAndFeelConfigurer Usage: platform optional Description:
    The platform doesn't specifically make direct use of this object
    (other than instantiating it). It is expected that the object will
    register itself into the UI Manager when it is instantiated in the
    context. Take a look at the JGoodiesLooksConfigurer class for an
    example of this.
  -->
  <bean id="lookAndFeelConfigurer"
    class="hr.fer.zemris.vhdllab.platform.support.OSBasedUIManagerConfigurer" />

  <!--
    Bean: imageResourcesFactory Usage: platform required (if you are
    using the DefaultImageSource, see below) Description: This specifies
    the component that is responsible for providing image resources
    locations. This factory uses the specified properties files to map
    image resource keys to image locations.
  -->
  <bean id="imageResourcesFactory"
    class="org.springframework.context.support.ResourceMapFactoryBean">
    <property name="locations">
      <list>
        <value>
          classpath:org/springframework/richclient/image/images.properties
        </value>
        <value>classpath:ui/images.properties
        </value>
      </list>
    </property>
  </bean>

  <!--
    Bean: imageSource Usage: platform required Description: This
    specifies the component that is responsible for providing images to
    the platform. It makes use of a resource factory that converts the
    image keys to resource locations. The DefaultImageSource also
    provides a "broken image" image for any requested image that can't
    be found or fails to load.
  -->
  <bean id="imageSource"
    class="org.springframework.richclient.image.DefaultImageSource">
    <constructor-arg index="0" ref="imageResourcesFactory" />
    <property name="brokenImageIndicator"
      value="/org/springframework/richclient/images/alert/error_obj.gif" />
  </bean>

  <!--
    Bean: formComponentInterceptorFactory Usage: platform optional
    Description: This specifies the list of interceptors to attach to
    controls constructed by the platform. This allows for a declarative
    model for specifying "additional" functionality to be added to
    various components. The configuration below adds interceptors to
    overlay validation error images and background color changes,
    provide popup menus in text fields, and autocompletion (as you type)
    for comboboxes.
  -->
  <bean id="formComponentInterceptorFactory"
    class="org.springframework.richclient.form.builder.support.ChainedInterceptorFactory">
    <property name="interceptorFactories">
      <list>
        <bean
          class="org.springframework.richclient.form.builder.support.ColorValidationInterceptorFactory">
          <property name="errorColor" value="255,245,245" />
        </bean>
        <bean
          class="org.springframework.richclient.form.builder.support.OverlayValidationInterceptorFactory" />
        <bean
          class="org.springframework.richclient.text.TextComponentPopupInterceptorFactory" />
        <bean
          class="org.springframework.richclient.list.ComboBoxAutoCompletionInterceptorFactory" />
      </list>
    </property>
  </bean>

  <bean id="exceptionHandler"
    class="org.springframework.richclient.exceptionhandling.delegation.DelegatingExceptionHandler">
    <property name="delegateList">
      <list>
        <!--        <bean-->
        <!--
          class="org.springframework.richclient.exceptionhandling.delegation.SimpleExceptionHandlerDelegate">
        -->
        <!--          <property name="throwableClassList">-->
        <!--            <list>-->
        <!--
          <value
          type="java.lang.Class">org.acegisecurity.AuthenticationException</value>
        -->
        <!--
          <value
          type="java.lang.Class">org.acegisecurity.AccessDeniedException
        -->
        <!--              </value>-->
        <!--            </list>-->
        <!--          </property>-->
        <!--          <property name="exceptionHandler">-->
        <!--            <bean-->
        <!--
          class="org.springframework.richclient.exceptionhandling.MessagesDialogExceptionHandler">
        -->
        <!--              <property name="logLevel" value="WARN" />-->
        <!--              <property name="shutdownPolicy" value="NONE" />-->
        <!--            </bean>-->
        <!--          </property>-->
        <!--        </bean>-->
        <!--        <bean-->
        <!--
          class="org.springframework.richclient.exceptionhandling.delegation.SimpleExceptionHandlerDelegate">
        -->
        <!--          <property name="throwableClass">-->
        <!--
          <value
          type="java.lang.Class">org.hibernate.validator.InvalidStateException</value>
        -->
        <!--          </property>-->
        <!--          <property name="exceptionHandler">-->
        <!--            <bean-->
        <!--
          class="org.springframework.richclient.exceptionhandling.HibernateValidatorDialogExceptionHandler">
        -->
        <!--              <property name="logLevel" value="INFO" />-->
        <!--              <property name="shutdownPolicy" value="NONE" />-->
        <!--            </bean>-->
        <!--          </property>-->
        <!--        </bean>-->
        <bean
          class="org.springframework.richclient.exceptionhandling.delegation.SimpleExceptionHandlerDelegate">
          <property name="throwableClassList">
            <list>
              <value>java.net.ConnectException</value>
              <value>java.security.cert.CertificateExpiredException</value>
              <value>java.lang.Error</value>
            </list>
          </property>
          <property name="exceptionPurger">
            <bean
              class="org.springframework.richclient.exceptionhandling.delegation.DefaultExceptionPurger">
              <property name="includeThrowableClassList">
                <list>
                  <value>java.net.ConnectException</value>
                  <value>java.security.cert.CertificateExpiredException</value>
                </list>
              </property>
            </bean>
          </property>
          <property name="exceptionHandler">
            <bean
              class="org.springframework.richclient.exceptionhandling.MessagesDialogExceptionHandler">
              <property name="logLevel" value="FATAL" />
              <property name="shutdownPolicy" value="OBLIGATE" />
            </bean>
          </property>
        </bean>
        <!--
          The order is important: if Throwable would be first then the
          others would be ignored
        -->
        <bean
          class="org.springframework.richclient.exceptionhandling.delegation.SimpleExceptionHandlerDelegate">
          <property name="throwableClass" value="java.lang.Throwable" />
          <property name="exceptionHandler">
            <bean
              class="org.springframework.richclient.exceptionhandling.JXErrorDialogExceptionHandler">
              <property name="logLevel" value="ERROR" />
            </bean>
          </property>
        </bean>
      </list>
    </property>
  </bean>

</beans>